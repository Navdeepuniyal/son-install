- name: Ensure bash, OpenSSl, and libssl are the latest versions
  apt: name={{ item }} update_cache=true state=latest
  with_items:
  - bash
  - openssl
  - libssl-dev
  - libssl-doc
  tags: packages

- name: Install PostgreSQL
  apt: name={{ item }} update_cache=true state=installed
  with_items:
  - postgresql
  - postgresql-contrib
  - libpq-dev
  - python-psycopg2
  tags: packages

- name: Ensure the PostgreSQL service is running 
  service: name=postgresql state=started enabled=yes

- name: Create cluster for pgsql
  command: /usr/bin/pg_createcluster {{ item }} main --start
  ignore_errors: yes
  with_items:
    - 9.1
    - 9.2
    - 9.3
    - 9.4
    - 9.5

- name: get path postgres configuration file
  shell: find /etc -name postgresql.conf
  register: pgversion

- name: Ensure PostgreSQL is listening on all localhost
  lineinfile: dest={{ pgversion.stdout}}
    regexp='^#?listen_addresses\s*='
    line="listen_addresses = '*'"
    state=present
  notify: restart postgresql

- name: get path postgres hba configuration file
  shell: find /etc -name pg_hba.conf
  register: pghbaversion

- name: Ensure PostgreSQL allow connections from docker network
  lineinfile: dest={{ pghbaversion.stdout}}
    regexp='host\s+all\s+all\s+127.0.0.1/32\s+md5'
    line='host all all 172.17.0.0/16 md5'
    insertbefore=BOF
  notify: restart postgresql

- name: Ensure database is created 
  sudo_user: postgres
  postgresql_db: name={{ db_name }} encoding='UTF-8' lc_collate='en_US.UTF-8' lc_ctype='en_US.UTF-8' template='template0' state=present

- name: Ensure user has access to the database 
  sudo_user: postgres 
  postgresql_user: db={{ db_name }} name={{ db_user }} password={{ db_password }} priv=ALL state=present 

#- name: Ensure user does not have unnecessary privileges 
#  sudo_user: postgres 
#  postgresql_user: name={{ db_user }} role_attr_flags=NOSUPERUSER,NOCREATEDB state=present

- name: Ensure postgres have uuid-ossp extension
  sudo_user: postgres
  postgresql_ext: name=uuid-ossp db={{ db_name }}
